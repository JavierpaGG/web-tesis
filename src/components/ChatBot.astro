---
import "../styles/global.css";
---

<!-- Contenedor del Chatbot -->
<div id="chat-container" class="fixed bottom-6 right-6 z-50">
  <!-- Botón flotante del chat -->
  <button
    id="chat-toggle"
    class="bg-gradient-to-r from-indigo-600 to-purple-600 text-white p-4 rounded-full shadow-xl hover:shadow-2xl transition-all duration-300 hover:scale-105"
    aria-label="Abrir chat de asistencia"
  >
    <i class="fas fa-comment-dots text-xl"></i>
  </button>

  <!-- Caja del chat -->
  <div
    id="chat-box"
    class="hidden w-96 h-[500px] bg-white shadow-xl rounded-lg overflow-hidden flex flex-col border border-gray-200 transform transition-all duration-300"
  >
    <!-- Encabezado del chat -->
    <div class="bg-gradient-to-r from-indigo-600 to-purple-600 text-white p-4 flex items-center">
      <div class="flex items-center">
        <div class="bg-white/20 p-2 rounded-full mr-3">
          <i class="fas fa-robot text-white"></i>
        </div>
        <div>
          <h3 class="font-bold">Asistente Docente</h3>
          <p class="text-xs opacity-90">Soporte pedagógico 24/7</p>
        </div>
      </div>
      <button id="chat-close" class="ml-auto text-white hover:text-yellow-300">
        <i class="fas fa-times"></i>
      </button>
    </div>

    <!-- Mensajes del chat -->
    <div
      id="chat-messages"
      class="flex-1 overflow-y-auto p-4 space-y-3 bg-gray-50"
    >
      <!-- Mensaje de bienvenida inicial -->
      <div class="flex flex-col items-center justify-center h-full text-center text-gray-500" id="welcome-message">
        <div class="bg-indigo-100 p-3 rounded-full mb-3">
          <i class="fas fa-chalkboard-teacher text-indigo-600 text-2xl"></i>
        </div>
        <h4 class="font-medium text-gray-700">¡Hola Docente!</h4>
        <p class="text-sm mt-1">¿En qué puedo ayudarte con tu clase hoy?</p>
        <div class="mt-4 grid grid-cols-2 gap-2 text-left w-full px-4">
          <button class="suggested-question bg-white text-indigo-700 p-2 rounded-lg border border-indigo-200 text-xs hover:bg-indigo-50">
            Ideas para clase interactiva
          </button>
          <button class="suggested-question bg-white text-indigo-700 p-2 rounded-lg border border-indigo-200 text-xs hover:bg-indigo-50">
            Ejemplos de evaluación
          </button>
          <button class="suggested-question bg-white text-indigo-700 p-2 rounded-lg border border-indigo-200 text-xs hover:bg-indigo-50">
            Recursos para mi asignatura
          </button>
          <button class="suggested-question bg-white text-indigo-700 p-2 rounded-lg border border-indigo-200 text-xs hover:bg-indigo-50">
            Cómo usar Teams
          </button>
        </div>
      </div>
    </div>

    <!-- Input y botones -->
    <div class="border-t border-gray-200 p-3 bg-white">
      <div class="flex items-center space-x-2">
        <input
          id="chat-input"
          type="text"
          class="flex-1 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500 focus:border-indigo-500"
          placeholder="Escribe tu pregunta docente..."
          aria-label="Escribe tu mensaje"
        />
        <button 
          id="chat-send" 
          class="bg-gradient-to-r from-indigo-600 to-purple-600 text-white p-3 rounded-lg hover:from-indigo-700 hover:to-purple-700 transition duration-300"
          aria-label="Enviar mensaje"
        >
          <i class="fas fa-paper-plane"></i>
        </button>
      </div>
      <p class="text-xs text-gray-500 mt-2 text-center">Respuestas especializadas para docentes</p>
    </div>
  </div>
</div>

<script is:inline>
  document.addEventListener("DOMContentLoaded", () => {
    const chatContainer = document.getElementById("chat-container");
    const chatToggle = document.getElementById("chat-toggle");
    const chatBox = document.getElementById("chat-box");
    const chatClose = document.getElementById("chat-close");
    const chatMessages = document.getElementById("chat-messages");
    const welcomeMessage = document.getElementById("welcome-message");
    const chatInput = document.getElementById("chat-input");
    const chatSend = document.getElementById("chat-send");

    // Verificar elementos
    if (!chatToggle || !chatBox || !chatMessages || !chatInput || !chatSend || !chatClose) {
      console.error("Elementos del chat no encontrados");
      return;
    }

    // Función para abrir el chat
    const openChat = () => {
      chatBox.classList.remove("hidden");
      chatInput.focus();
      chatBox.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
    };

    // Mostrar/ocultar chat
    chatToggle.addEventListener("click", openChat);

    chatClose.addEventListener("click", () => {
      chatBox.classList.add("hidden");
    });

    // Cargar historial desde localStorage
    const loadChatHistory = () => {
      const savedChat = localStorage.getItem("chatHistory");
      if (savedChat) {
        chatMessages.innerHTML = savedChat;
        if (welcomeMessage) welcomeMessage.style.display = 'none';
        chatMessages.scrollTop = chatMessages.scrollHeight;
      }
    };

    loadChatHistory();

    // Agregar mensaje al chat
    const addMessage = (sender, message, isBot = false) => {
      if (welcomeMessage) welcomeMessage.style.display = 'none';
      
      const messageDiv = document.createElement('div');
      messageDiv.className = isBot ? 
        'flex items-start space-x-2' : 
        'flex items-start space-x-2 justify-end';
      
      messageDiv.innerHTML = isBot ? `
        <div class="flex-shrink-0 bg-indigo-100 p-2 rounded-full">
          <i class="fas fa-robot text-indigo-600"></i>
        </div>
        <div class="bg-white text-gray-700 p-3 rounded-lg shadow-sm max-w-[80%] border border-gray-200 text-justify">
          <strong class="text-indigo-600">Asistente:</strong> ${message}
        </div>
      ` : `
        <div class="bg-indigo-600 text-white p-3 rounded-lg shadow-sm max-w-[80%]">
          <strong>Tú:</strong> ${message}
        </div>
      `;
      
      chatMessages.appendChild(messageDiv);
      chatMessages.scrollTop = chatMessages.scrollHeight;
      localStorage.setItem("chatHistory", chatMessages.innerHTML);
    };

    // Enviar mensaje
    const sendMessage = async () => {
      const userMessage = chatInput.value.trim();
      if (!userMessage) return;

      addMessage('user', userMessage);
      chatInput.value = '';

      // Mostrar estado de "escribiendo"
      const typingIndicator = document.createElement('div');
      typingIndicator.className = 'flex items-start space-x-2';
      typingIndicator.innerHTML = `
        <div class="flex-shrink-0 bg-indigo-100 p-2 rounded-full">
          <i class="fas fa-robot text-indigo-600"></i>
        </div>
        <div class="bg-white text-gray-500 p-3 rounded-lg shadow-sm max-w-[80%] border border-gray-200">
          <div class="flex space-x-1">
            <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
            <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-100"></div>
            <div class="w-2 h-2 bg-gray-400 rounded-full animate-bounce delay-200"></div>
          </div>
        </div>
      `;
      chatMessages.appendChild(typingIndicator);
      chatMessages.scrollTop = chatMessages.scrollHeight;

      // Enviar mensaje a la API
      try {
        const response = await fetch("/api/chat", {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ message: userMessage, role: "teacher" }), // Añadir rol docente
        });

        const data = await response.json();
        let botReply = data.reply || "No pude encontrar información al respecto. ¿Podrías reformular tu pregunta?";

        // Eliminar indicador de "escribiendo"
        typingIndicator.remove();

        // Formatear respuesta manteniendo saltos de línea
        botReply = botReply
          .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>') // Mantener negritas
          .replace(/\*(.*?)\*/g, '<em>$1</em>') // Mantener cursivas
          .replace(/```([\s\S]*?)```/g, '<pre class="bg-gray-100 p-2 rounded my-2 overflow-x-auto"><code>$1</code></pre>') // Bloques de código
          .replace(/\n/g, '<br>'); // Saltos de línea

        addMessage('bot', botReply, true);
      } catch (error) {
        console.error("Error:", error);
        typingIndicator.remove();
        addMessage('bot', "Estoy teniendo dificultades técnicas. Por favor intenta nuevamente más tarde.", true);
      }
    };

    // Event listeners
    chatSend.addEventListener("click", sendMessage);
    chatInput.addEventListener("keydown", (event) => {
      if (event.key === "Enter") {
        sendMessage();
      }
    });

    // Preguntas sugeridas
    document.querySelectorAll('.suggested-question').forEach(btn => {
      btn.addEventListener('click', () => {
        const question = btn.textContent.trim();
        chatInput.value = question;
        chatInput.focus();
      });
    });

    // Cerrar al hacer clic fuera
    document.addEventListener('click', (event) => {
      if (!chatContainer.contains(event.target)) {
        if (!chatBox.classList.contains('hidden') && 
            event.target.id !== 'activate-chatbot') {
          chatBox.classList.add('hidden');
        }
      }
    });

    // Exponer función openChat para botón "Activar Asistente"
    window.openChatAssistant = openChat;
  });
</script>

<style>
  #chat-messages::-webkit-scrollbar {
    width: 6px;
  }
  
  #chat-messages::-webkit-scrollbar-track {
    background: #f1f1f1;
    border-radius: 10px;
  }
  
  #chat-messages::-webkit-scrollbar-thumb {
    background: #c7d2fe;
    border-radius: 10px;
  }
  
  #chat-messages::-webkit-scrollbar-thumb:hover {
    background: #a5b4fc;
  }

  .suggested-question {
    transition: all 0.2s ease;
    transform-origin: center;
  }

  .suggested-question:hover {
    transform: scale(1.02);
    box-shadow: 0 2px 8px rgba(99, 102, 241, 0.2);
    background-color: #f5f3ff;
  }

  .suggested-question:active {
    transform: scale(0.98);
  }

  pre code {
    font-family: 'Courier New', monospace;
    font-size: 0.9em;
    white-space: pre-wrap;
  }
</style>